#!/usr/bin/env ruby
require 'optparse'
require 'pathname'

class String

  def undent
    min_space_num = self.split("\n").delete_if { |s| s=~ /^\s*$/ }.map{ |s| s[/^\s*/].length }.min
    self.gsub(/^ {,#{min_space_num}}/, '')
  end

  def red;  STDOUT.isatty ? "\033[31m#{self}\033[0m" : self end
  def cyan; STDOUT.isatty ? "\033[36m#{self}\033[0m" : self end
end

class NonRepositoryError < StandardError
  def to_s; 'car not detect a repository url'.red end
end

class ToMustBeWithFromError < StandardError
  def to_s; '`to` option must be specified with `from`'.red end
end

module FSSH

  def fssh?
    ! ENV['LC_FSSH_PORT'].nil?
  end

  def system(cmd)
    if fssh?
      Kernel.system <<-CMD.undent.split("\n").join
        ssh -p #{ENV['LC_FSSH_PORT']}
          -l #{ENV['LC_FSSH_USER']}
          #{ENV['LC_FSSH_COPY_ARGS']}
          localhost
          PATH=#{ENV['LC_FSSH_PATH']} "#{cmd}"
      CMD
    else
      Kernel.system cmd
    end
  end

  def copy(txt)
    copy_cmd = if FSSH::fssh?
                 ENV['LC_FSSH_COPY']
               elsif RUBY_PLATFORM =~ /darwin/
                 rtun = `which reattach-to-user-namespace`.chomp
                 rtun = '' unless $?.success?
                 system "#{rtun} pbcopy"
               else
                 system 'xclip -i'
               end
    system "echo '#{txt}' | #{copy_cmd}"
  end

  module_function *%i[fssh? system copy]
end

class GithubUrl

  def initialize
    git_remote = `git remote -v`
    raise NonRepositoryError if git_remote == ''
    @url = case git_remote.split("\n")[0].split("\t")[1].split(' ')[0]
           when %r[\Agit@([\w.-]+):(.*?)(?:\.git)?\z]
             "https://#$1/#$2"
           when %r[\Assh://git@(.*?)(?:\.git)?\z]
             "https://#$1"
           when %r[\Agit://(.*?)(?:\.git)?\z]
             "https://#$1"
           when %r[\A(https://.*?)(?:\.git)?\z]
             $1
           else
             raise NonRepositoryError
           end
  end

  def to_s
    @url.to_s
  end

  def open
    puts "opening url: #@url".cyan
    FSSH::copy @url
    FSSH::system "open #@url"
  end

  def +(other)
    @url += '/' unless @url =~ %r[/\z] || other.to_s =~ %r[\A/]
    @url += other.to_s
    self
  end

  def line_hash(from, to)
    raise ToMustBeWithFromError if from == 0 && to > 0
    return self if from == 0 && to == 0
    @url += "#L#{from}" + if to == 0
                            ''
                          else
                            "-#{to}"
                          end
    self
  end
end

class OpenTarget

  def initialize(str)
    return if str.nil?

    @path = Pathname(str)
    @path = @path.expand_path if @path.relative?
    if @path.directory?
      Dir.chdir @path
    else
      Dir.chdir @path.dirname
    end
    git_top_dir = Pathname(`git rev-parse --show-toplevel`.chomp)
    @path = if @path == git_top_dir
              nil
            else
              @path.relative_path_from git_top_dir
            end
  end

  def to_s
    @path.to_s
  end

  def nil?
    @path.nil?
  end
end

class OpenGithubLink

  BRANCH_NOT_SPECIFIED = '(not specified)'

  def initialize
    params = ARGV.getopts('', 'root', 'from:0', 'to:0', "branch:#{BRANCH_NOT_SPECIFIED}", 'help')
    help_and_exit if params['help']
    from   = params['from'].to_i
    to     = params['to'].to_i
    target = OpenTarget.new ARGV[0]
    branch = if params['branch'] == BRANCH_NOT_SPECIFIED
               default_branch
             else
               params['branch']
             end
    github_url = GithubUrl.new
    if params['root']
      if params['branch'] == BRANCH_NOT_SPECIFIED
        github_url.open
      else
        (github_url + "tree/#{branch}").open
      end
    elsif target.nil?
      github_url.open
    else
      (github_url + "blob/#{branch}" + target).line_hash(from, to).open
    end
  end

  def default_branch
    /^\s*HEAD branch: (.*)$/.match(`git remote show origin`)[1]
  end

  def help_and_exit
    puts <<-HELP.undent
      Usage: #$0 [options] [path]

        path            filename to display
        -f  --from      top line number to highlight
        -t  --to        bottom line number to highlight
        -b  --branch    branch to display (default: master)

      All are optional. If a path is not specified, you see the top page of the
      repository in the browser.
    HELP
    exit
  end
end

OpenGithubLink.new if $0 == __FILE__
